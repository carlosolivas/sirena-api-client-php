<?php
/**
 * ProspectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers, messaging and prospect data manipulation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: it@sirena.app
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ProspectsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProspectsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCSAT
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\CSAT $csat The customer satisfaction rating for the prospect. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function createCSAT($prospect_id, $csat)
    {
        list($response) = $this->createCSATWithHttpInfo($prospect_id, $csat);
        return $response;
    }

    /**
     * Operation createCSATWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\CSAT $csat The customer satisfaction rating for the prospect. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCSATWithHttpInfo($prospect_id, $csat)
    {
        $returnType = 'object';
        $request = $this->createCSATRequest($prospect_id, $csat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCSATAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\CSAT $csat The customer satisfaction rating for the prospect. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCSATAsync($prospect_id, $csat)
    {
        return $this->createCSATAsyncWithHttpInfo($prospect_id, $csat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCSATAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\CSAT $csat The customer satisfaction rating for the prospect. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCSATAsyncWithHttpInfo($prospect_id, $csat)
    {
        $returnType = 'object';
        $request = $this->createCSATRequest($prospect_id, $csat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCSAT'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\CSAT $csat The customer satisfaction rating for the prospect. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCSATRequest($prospect_id, $csat)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling createCSAT'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.createCSAT, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'csat' is set
        if ($csat === null || (is_array($csat) && count($csat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $csat when calling createCSAT'
            );
        }

        $resourcePath = '/prospect/{prospectId}/csat';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($csat)) {
            $_tempBody = $csat;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInteractionByProspectId
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewEvent $event event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Interactions
     */
    public function createInteractionByProspectId($prospect_id, $event, $format = null)
    {
        list($response) = $this->createInteractionByProspectIdWithHttpInfo($prospect_id, $event, $format);
        return $response;
    }

    /**
     * Operation createInteractionByProspectIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Interactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInteractionByProspectIdWithHttpInfo($prospect_id, $event, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Interactions';
        $request = $this->createInteractionByProspectIdRequest($prospect_id, $event, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Interactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInteractionByProspectIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInteractionByProspectIdAsync($prospect_id, $event, $format = null)
    {
        return $this->createInteractionByProspectIdAsyncWithHttpInfo($prospect_id, $event, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInteractionByProspectIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInteractionByProspectIdAsyncWithHttpInfo($prospect_id, $event, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Interactions';
        $request = $this->createInteractionByProspectIdRequest($prospect_id, $event, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInteractionByProspectId'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInteractionByProspectIdRequest($prospect_id, $event, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling createInteractionByProspectId'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.createInteractionByProspectId, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling createInteractionByProspectId'
            );
        }

        $resourcePath = '/prospect/{prospectId}/interactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($event)) {
            $_tempBody = $event;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProspect
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Prospect
     */
    public function deleteProspect($prospect_id, $format = null)
    {
        list($response) = $this->deleteProspectWithHttpInfo($prospect_id, $format);
        return $response;
    }

    /**
     * Operation deleteProspectWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Prospect, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProspectWithHttpInfo($prospect_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->deleteProspectRequest($prospect_id, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Prospect',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProspectAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProspectAsync($prospect_id, $format = null)
    {
        return $this->deleteProspectAsyncWithHttpInfo($prospect_id, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProspectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProspectAsyncWithHttpInfo($prospect_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->deleteProspectRequest($prospect_id, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProspect'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProspectRequest($prospect_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling deleteProspect'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.deleteProspect, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deprecatedGetArchivingReasons
     *
     * @param  string $agent The agent that has archiving reasons. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ArchivingReasons
     */
    public function deprecatedGetArchivingReasons($agent, $format = null)
    {
        list($response) = $this->deprecatedGetArchivingReasonsWithHttpInfo($agent, $format);
        return $response;
    }

    /**
     * Operation deprecatedGetArchivingReasonsWithHttpInfo
     *
     * @param  string $agent The agent that has archiving reasons. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ArchivingReasons, HTTP status code, HTTP response headers (array of strings)
     */
    public function deprecatedGetArchivingReasonsWithHttpInfo($agent, $format = null)
    {
        $returnType = '\Swagger\Client\Model\ArchivingReasons';
        $request = $this->deprecatedGetArchivingReasonsRequest($agent, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ArchivingReasons',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deprecatedGetArchivingReasonsAsync
     *
     * 
     *
     * @param  string $agent The agent that has archiving reasons. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deprecatedGetArchivingReasonsAsync($agent, $format = null)
    {
        return $this->deprecatedGetArchivingReasonsAsyncWithHttpInfo($agent, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deprecatedGetArchivingReasonsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $agent The agent that has archiving reasons. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deprecatedGetArchivingReasonsAsyncWithHttpInfo($agent, $format = null)
    {
        $returnType = '\Swagger\Client\Model\ArchivingReasons';
        $request = $this->deprecatedGetArchivingReasonsRequest($agent, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deprecatedGetArchivingReasons'
     *
     * @param  string $agent The agent that has archiving reasons. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deprecatedGetArchivingReasonsRequest($agent, $format = null)
    {
        // verify the required parameter 'agent' is set
        if ($agent === null || (is_array($agent) && count($agent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $agent when calling deprecatedGetArchivingReasons'
            );
        }

        $resourcePath = '/archiving-reasons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($agent !== null) {
            $queryParams['agent'] = ObjectSerializer::toQueryValue($agent);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContactsSelection
     *
     * @param  string $selection_id The id of the contact selection. (required)
     * @param  string[] $fields The fields to return from prospect. The fields &#x60;id&#x60;, &#x60;status&#x60;, &#x60;leads&#x60;, &#x60;accountId&#x60;, &#x60;account&#x60;, &#x60;group&#x60;, &#x60;groupId&#x60; and &#x60;created&#x60; will always be returned. (optional)
     * @param  float $offset The offset number to start pagination starting with 0. Only the offset and the next limit number contacts will be returned. (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProspectsPaginated
     */
    public function getContactsSelection($selection_id, $fields = null, $offset = null, $limit = null)
    {
        list($response) = $this->getContactsSelectionWithHttpInfo($selection_id, $fields, $offset, $limit);
        return $response;
    }

    /**
     * Operation getContactsSelectionWithHttpInfo
     *
     * @param  string $selection_id The id of the contact selection. (required)
     * @param  string[] $fields The fields to return from prospect. The fields &#x60;id&#x60;, &#x60;status&#x60;, &#x60;leads&#x60;, &#x60;accountId&#x60;, &#x60;account&#x60;, &#x60;group&#x60;, &#x60;groupId&#x60; and &#x60;created&#x60; will always be returned. (optional)
     * @param  float $offset The offset number to start pagination starting with 0. Only the offset and the next limit number contacts will be returned. (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProspectsPaginated, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactsSelectionWithHttpInfo($selection_id, $fields = null, $offset = null, $limit = null)
    {
        $returnType = '\Swagger\Client\Model\ProspectsPaginated';
        $request = $this->getContactsSelectionRequest($selection_id, $fields, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProspectsPaginated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactsSelectionAsync
     *
     * 
     *
     * @param  string $selection_id The id of the contact selection. (required)
     * @param  string[] $fields The fields to return from prospect. The fields &#x60;id&#x60;, &#x60;status&#x60;, &#x60;leads&#x60;, &#x60;accountId&#x60;, &#x60;account&#x60;, &#x60;group&#x60;, &#x60;groupId&#x60; and &#x60;created&#x60; will always be returned. (optional)
     * @param  float $offset The offset number to start pagination starting with 0. Only the offset and the next limit number contacts will be returned. (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactsSelectionAsync($selection_id, $fields = null, $offset = null, $limit = null)
    {
        return $this->getContactsSelectionAsyncWithHttpInfo($selection_id, $fields, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContactsSelectionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $selection_id The id of the contact selection. (required)
     * @param  string[] $fields The fields to return from prospect. The fields &#x60;id&#x60;, &#x60;status&#x60;, &#x60;leads&#x60;, &#x60;accountId&#x60;, &#x60;account&#x60;, &#x60;group&#x60;, &#x60;groupId&#x60; and &#x60;created&#x60; will always be returned. (optional)
     * @param  float $offset The offset number to start pagination starting with 0. Only the offset and the next limit number contacts will be returned. (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactsSelectionAsyncWithHttpInfo($selection_id, $fields = null, $offset = null, $limit = null)
    {
        $returnType = '\Swagger\Client\Model\ProspectsPaginated';
        $request = $this->getContactsSelectionRequest($selection_id, $fields, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContactsSelection'
     *
     * @param  string $selection_id The id of the contact selection. (required)
     * @param  string[] $fields The fields to return from prospect. The fields &#x60;id&#x60;, &#x60;status&#x60;, &#x60;leads&#x60;, &#x60;accountId&#x60;, &#x60;account&#x60;, &#x60;group&#x60;, &#x60;groupId&#x60; and &#x60;created&#x60; will always be returned. (optional)
     * @param  float $offset The offset number to start pagination starting with 0. Only the offset and the next limit number contacts will be returned. (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContactsSelectionRequest($selection_id, $fields = null, $offset = null, $limit = null)
    {
        // verify the required parameter 'selection_id' is set
        if ($selection_id === null || (is_array($selection_id) && count($selection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $selection_id when calling getContactsSelection'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $selection_id)) {
            throw new \InvalidArgumentException("invalid value for \"selection_id\" when calling ProspectsApi.getContactsSelection, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/contacts/selection/{selectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($selection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'selectionId' . '}',
                ObjectSerializer::toPathValue($selection_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInteractionById
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Interaction
     */
    public function getInteractionById($prospect_id, $interaction_id, $format = null)
    {
        list($response) = $this->getInteractionByIdWithHttpInfo($prospect_id, $interaction_id, $format);
        return $response;
    }

    /**
     * Operation getInteractionByIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Interaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInteractionByIdWithHttpInfo($prospect_id, $interaction_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Interaction';
        $request = $this->getInteractionByIdRequest($prospect_id, $interaction_id, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Interaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInteractionByIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInteractionByIdAsync($prospect_id, $interaction_id, $format = null)
    {
        return $this->getInteractionByIdAsyncWithHttpInfo($prospect_id, $interaction_id, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInteractionByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInteractionByIdAsyncWithHttpInfo($prospect_id, $interaction_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Interaction';
        $request = $this->getInteractionByIdRequest($prospect_id, $interaction_id, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInteractionById'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInteractionByIdRequest($prospect_id, $interaction_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling getInteractionById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getInteractionById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'interaction_id' is set
        if ($interaction_id === null || (is_array($interaction_id) && count($interaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interaction_id when calling getInteractionById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $interaction_id)) {
            throw new \InvalidArgumentException("invalid value for \"interaction_id\" when calling ProspectsApi.getInteractionById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}/interaction/{interactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($interaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interactionId' . '}',
                ObjectSerializer::toPathValue($interaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInteractions
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $agent The id of the agent to filter. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via via (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Interactions
     */
    public function getInteractions($format = null, $before = null, $after = null, $limit = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        list($response) = $this->getInteractionsWithHttpInfo($format, $before, $after, $limit, $agent, $status, $created_after, $start, $created_before, $end, $via);
        return $response;
    }

    /**
     * Operation getInteractionsWithHttpInfo
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $agent The id of the agent to filter. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Interactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInteractionsWithHttpInfo($format = null, $before = null, $after = null, $limit = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        $returnType = '\Swagger\Client\Model\Interactions';
        $request = $this->getInteractionsRequest($format, $before, $after, $limit, $agent, $status, $created_after, $start, $created_before, $end, $via);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Interactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInteractionsAsync
     *
     * 
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $agent The id of the agent to filter. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInteractionsAsync($format = null, $before = null, $after = null, $limit = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        return $this->getInteractionsAsyncWithHttpInfo($format, $before, $after, $limit, $agent, $status, $created_after, $start, $created_before, $end, $via)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInteractionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $agent The id of the agent to filter. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInteractionsAsyncWithHttpInfo($format = null, $before = null, $after = null, $limit = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        $returnType = '\Swagger\Client\Model\Interactions';
        $request = $this->getInteractionsRequest($format, $before, $after, $limit, $agent, $status, $created_after, $start, $created_before, $end, $via);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInteractions'
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $agent The id of the agent to filter. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInteractionsRequest($format = null, $before = null, $after = null, $limit = null, $agent = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        if ($before !== null && !preg_match("/^[a-z0-9]{24}$/", $before)) {
            throw new \InvalidArgumentException("invalid value for \"before\" when calling ProspectsApi.getInteractions, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        if ($after !== null && !preg_match("/^[a-z0-9]{24}$/", $after)) {
            throw new \InvalidArgumentException("invalid value for \"after\" when calling ProspectsApi.getInteractions, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospects/interactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($agent !== null) {
            $queryParams['agent'] = ObjectSerializer::toQueryValue($agent);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if (is_array($via)) {
            $queryParams['via'] = $via;
        } else
        if ($via !== null) {
            $queryParams['via'] = ObjectSerializer::toQueryValue($via);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProspectAdditionalFieldsById
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ProspectAdditionalFields
     */
    public function getProspectAdditionalFieldsById($prospect_id, $format = null)
    {
        list($response) = $this->getProspectAdditionalFieldsByIdWithHttpInfo($prospect_id, $format);
        return $response;
    }

    /**
     * Operation getProspectAdditionalFieldsByIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ProspectAdditionalFields, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectAdditionalFieldsByIdWithHttpInfo($prospect_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\ProspectAdditionalFields';
        $request = $this->getProspectAdditionalFieldsByIdRequest($prospect_id, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ProspectAdditionalFields',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProspectAdditionalFieldsByIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectAdditionalFieldsByIdAsync($prospect_id, $format = null)
    {
        return $this->getProspectAdditionalFieldsByIdAsyncWithHttpInfo($prospect_id, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProspectAdditionalFieldsByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectAdditionalFieldsByIdAsyncWithHttpInfo($prospect_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\ProspectAdditionalFields';
        $request = $this->getProspectAdditionalFieldsByIdRequest($prospect_id, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProspectAdditionalFieldsById'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProspectAdditionalFieldsByIdRequest($prospect_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling getProspectAdditionalFieldsById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectAdditionalFieldsById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}/prospectAdditionalFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProspectById
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Prospect
     */
    public function getProspectById($prospect_id, $format = null)
    {
        list($response) = $this->getProspectByIdWithHttpInfo($prospect_id, $format);
        return $response;
    }

    /**
     * Operation getProspectByIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Prospect, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectByIdWithHttpInfo($prospect_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->getProspectByIdRequest($prospect_id, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Prospect',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProspectByIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectByIdAsync($prospect_id, $format = null)
    {
        return $this->getProspectByIdAsyncWithHttpInfo($prospect_id, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProspectByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectByIdAsyncWithHttpInfo($prospect_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->getProspectByIdRequest($prospect_id, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProspectById'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProspectByIdRequest($prospect_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling getProspectById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProspectInteractions
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter interactions. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via via (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Interactions
     */
    public function getProspectInteractions($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        list($response) = $this->getProspectInteractionsWithHttpInfo($prospect_id, $format, $status, $created_after, $start, $created_before, $end, $via);
        return $response;
    }

    /**
     * Operation getProspectInteractionsWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter interactions. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Interactions, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectInteractionsWithHttpInfo($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        $returnType = '\Swagger\Client\Model\Interactions';
        $request = $this->getProspectInteractionsRequest($prospect_id, $format, $status, $created_after, $start, $created_before, $end, $via);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Interactions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProspectInteractionsAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter interactions. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectInteractionsAsync($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        return $this->getProspectInteractionsAsyncWithHttpInfo($prospect_id, $format, $status, $created_after, $start, $created_before, $end, $via)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProspectInteractionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter interactions. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectInteractionsAsyncWithHttpInfo($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        $returnType = '\Swagger\Client\Model\Interactions';
        $request = $this->getProspectInteractionsRequest($prospect_id, $format, $status, $created_after, $start, $created_before, $end, $via);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProspectInteractions'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter interactions. (optional)
     * @param  \DateTime $created_after The start date to filter interactions by their creation date. (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter interactions by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter interactions by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter interactions by their creation date (alias of createdBefore). (optional)
     * @param  string[] $via (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProspectInteractionsRequest($prospect_id, $format = null, $status = null, $created_after = null, $start = null, $created_before = null, $end = null, $via = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling getProspectInteractions'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectInteractions, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}/interactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if (is_array($via)) {
            $queryParams['via'] = $via;
        } else
        if ($via !== null) {
            $queryParams['via'] = ObjectSerializer::toQueryValue($via);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProspectQuotes
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Quotes
     */
    public function getProspectQuotes($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        list($response) = $this->getProspectQuotesWithHttpInfo($prospect_id, $format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);
        return $response;
    }

    /**
     * Operation getProspectQuotesWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Quotes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectQuotesWithHttpInfo($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        $returnType = '\Swagger\Client\Model\Quotes';
        $request = $this->getProspectQuotesRequest($prospect_id, $format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Quotes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProspectQuotesAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectQuotesAsync($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        return $this->getProspectQuotesAsyncWithHttpInfo($prospect_id, $format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProspectQuotesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectQuotesAsyncWithHttpInfo($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        $returnType = '\Swagger\Client\Model\Quotes';
        $request = $this->getProspectQuotesRequest($prospect_id, $format, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProspectQuotes'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProspectQuotesRequest($prospect_id, $format = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling getProspectQuotes'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getProspectQuotes, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after);
        }
        // query params
        if ($accepted_before !== null) {
            $queryParams['acceptedBefore'] = ObjectSerializer::toQueryValue($accepted_before);
        }
        // query params
        if ($accepted_after !== null) {
            $queryParams['acceptedAfter'] = ObjectSerializer::toQueryValue($accepted_after);
        }
        // query params
        if ($rejected_before !== null) {
            $queryParams['rejectedBefore'] = ObjectSerializer::toQueryValue($rejected_before);
        }
        // query params
        if ($rejected_after !== null) {
            $queryParams['rejectedAfter'] = ObjectSerializer::toQueryValue($rejected_after);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProspects
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param  string $phone_number A phone number string to filter prospects (optional)
     * @param  string $category The category to filter prospects. (optional)
     * @param  string $status The status to filter prospects. (optional)
     * @param  string $agent The id of an agent to filter prospects (optional)
     * @param  \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter prospects by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore). (optional)
     * @param  \DateTime $claimed_after The start date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter). (optional)
     * @param  \DateTime $claimed_before The end date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore). (optional)
     * @param  \DateTime $transferred_after The start date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_start The start date to filter prospects by their transfer date (alias of transferredAfter) (optional)
     * @param  \DateTime $transferred_before The end date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_end The end date to filter prospects by their transfer date (alias of transferredBefore) (optional)
     * @param  bool $with_agent A boolean specifying whether a prospect has an assigned Agent or not (optional)
     * @param  string $group The id of a group to filter prospects (optional)
     * @param  string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60;. * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;.  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;.   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Prospects
     */
    public function getProspects($format = null, $before = null, $after = null, $limit = null, $search = null, $phone_number = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $transferred_after = null, $transfer_start = null, $transferred_before = null, $transfer_end = null, $with_agent = null, $group = null, $additional_data = null)
    {
        list($response) = $this->getProspectsWithHttpInfo($format, $before, $after, $limit, $search, $phone_number, $category, $status, $agent, $created_after, $start, $created_before, $end, $claimed_after, $claim_start, $claimed_before, $claim_end, $transferred_after, $transfer_start, $transferred_before, $transfer_end, $with_agent, $group, $additional_data);
        return $response;
    }

    /**
     * Operation getProspectsWithHttpInfo
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param  string $phone_number A phone number string to filter prospects (optional)
     * @param  string $category The category to filter prospects. (optional)
     * @param  string $status The status to filter prospects. (optional)
     * @param  string $agent The id of an agent to filter prospects (optional)
     * @param  \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter prospects by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore). (optional)
     * @param  \DateTime $claimed_after The start date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter). (optional)
     * @param  \DateTime $claimed_before The end date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore). (optional)
     * @param  \DateTime $transferred_after The start date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_start The start date to filter prospects by their transfer date (alias of transferredAfter) (optional)
     * @param  \DateTime $transferred_before The end date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_end The end date to filter prospects by their transfer date (alias of transferredBefore) (optional)
     * @param  bool $with_agent A boolean specifying whether a prospect has an assigned Agent or not (optional)
     * @param  string $group The id of a group to filter prospects (optional)
     * @param  string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60;. * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;.  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;.   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Prospects, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProspectsWithHttpInfo($format = null, $before = null, $after = null, $limit = null, $search = null, $phone_number = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $transferred_after = null, $transfer_start = null, $transferred_before = null, $transfer_end = null, $with_agent = null, $group = null, $additional_data = null)
    {
        $returnType = '\Swagger\Client\Model\Prospects';
        $request = $this->getProspectsRequest($format, $before, $after, $limit, $search, $phone_number, $category, $status, $agent, $created_after, $start, $created_before, $end, $claimed_after, $claim_start, $claimed_before, $claim_end, $transferred_after, $transfer_start, $transferred_before, $transfer_end, $with_agent, $group, $additional_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Prospects',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProspectsAsync
     *
     * 
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param  string $phone_number A phone number string to filter prospects (optional)
     * @param  string $category The category to filter prospects. (optional)
     * @param  string $status The status to filter prospects. (optional)
     * @param  string $agent The id of an agent to filter prospects (optional)
     * @param  \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter prospects by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore). (optional)
     * @param  \DateTime $claimed_after The start date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter). (optional)
     * @param  \DateTime $claimed_before The end date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore). (optional)
     * @param  \DateTime $transferred_after The start date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_start The start date to filter prospects by their transfer date (alias of transferredAfter) (optional)
     * @param  \DateTime $transferred_before The end date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_end The end date to filter prospects by their transfer date (alias of transferredBefore) (optional)
     * @param  bool $with_agent A boolean specifying whether a prospect has an assigned Agent or not (optional)
     * @param  string $group The id of a group to filter prospects (optional)
     * @param  string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60;. * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;.  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;.   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectsAsync($format = null, $before = null, $after = null, $limit = null, $search = null, $phone_number = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $transferred_after = null, $transfer_start = null, $transferred_before = null, $transfer_end = null, $with_agent = null, $group = null, $additional_data = null)
    {
        return $this->getProspectsAsyncWithHttpInfo($format, $before, $after, $limit, $search, $phone_number, $category, $status, $agent, $created_after, $start, $created_before, $end, $claimed_after, $claim_start, $claimed_before, $claim_end, $transferred_after, $transfer_start, $transferred_before, $transfer_end, $with_agent, $group, $additional_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProspectsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param  string $phone_number A phone number string to filter prospects (optional)
     * @param  string $category The category to filter prospects. (optional)
     * @param  string $status The status to filter prospects. (optional)
     * @param  string $agent The id of an agent to filter prospects (optional)
     * @param  \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter prospects by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore). (optional)
     * @param  \DateTime $claimed_after The start date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter). (optional)
     * @param  \DateTime $claimed_before The end date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore). (optional)
     * @param  \DateTime $transferred_after The start date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_start The start date to filter prospects by their transfer date (alias of transferredAfter) (optional)
     * @param  \DateTime $transferred_before The end date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_end The end date to filter prospects by their transfer date (alias of transferredBefore) (optional)
     * @param  bool $with_agent A boolean specifying whether a prospect has an assigned Agent or not (optional)
     * @param  string $group The id of a group to filter prospects (optional)
     * @param  string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60;. * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;.  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;.   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProspectsAsyncWithHttpInfo($format = null, $before = null, $after = null, $limit = null, $search = null, $phone_number = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $transferred_after = null, $transfer_start = null, $transferred_before = null, $transfer_end = null, $with_agent = null, $group = null, $additional_data = null)
    {
        $returnType = '\Swagger\Client\Model\Prospects';
        $request = $this->getProspectsRequest($format, $before, $after, $limit, $search, $phone_number, $category, $status, $agent, $created_after, $start, $created_before, $end, $claimed_after, $claim_start, $claimed_before, $claim_end, $transferred_after, $transfer_start, $transferred_before, $transfer_end, $with_agent, $group, $additional_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProspects'
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $search A search string to filter prospects. It can be a phone number, an email address or a name. (optional)
     * @param  string $phone_number A phone number string to filter prospects (optional)
     * @param  string $category The category to filter prospects. (optional)
     * @param  string $status The status to filter prospects. (optional)
     * @param  string $agent The id of an agent to filter prospects (optional)
     * @param  \DateTime $created_after The start date to filter prospects by their creation date (optional)
     * @param  \DateTime $start @deprecated - use createdAfter The start date to filter prospects by their creation date (alias of createdAfter). (optional)
     * @param  \DateTime $created_before The end date to filter prospects by their creation date. (optional)
     * @param  \DateTime $end @deprecated - use createdBefore The end date to filter prospects by their creation date (alias of createdBefore). (optional)
     * @param  \DateTime $claimed_after The start date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_start The start date to filter prospects by their claim date (alias of claimAfter). (optional)
     * @param  \DateTime $claimed_before The end date to filter prospects by their claim date. (optional)
     * @param  \DateTime $claim_end The end date to filter prospects by their claim date (alias of claimBefore). (optional)
     * @param  \DateTime $transferred_after The start date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_start The start date to filter prospects by their transfer date (alias of transferredAfter) (optional)
     * @param  \DateTime $transferred_before The end date to filter prospects by their transfer date (optional)
     * @param  \DateTime $transfer_end The end date to filter prospects by their transfer date (alias of transferredBefore) (optional)
     * @param  bool $with_agent A boolean specifying whether a prospect has an assigned Agent or not (optional)
     * @param  string $group The id of a group to filter prospects (optional)
     * @param  string[] $additional_data List of filters for additionalData on format &#x60;[FIELD][OPERATOR][VALUE]&#x60;. * FIELD: Can be any additional data field * OPERATOR: Can be &#x3D;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt; or ~ (contains) * VALUE\\: Any string  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;finance&#x3D;1&#x60; Filter all prospect that have additionalData.finance and is equal to &#x60;1&#x60;.  &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;birthdate&lt;01/01/2000&amp;additionalData[]&#x3D;birthdate&gt;&#x3D;01/01/1990&#x60; Filter all prospect that have additionalData.birthdate, is greater or equal than &#x60;01/01/1990&#x60; and lower than &#x60;01/01/2000&#x60;.   &#x60;/prospects?api-key{API_KEY}&amp;additionalData[]&#x3D;style~blue&#x60; Filter all prospect that have additionalData.style and contains &#x60;blue&#x60; string. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProspectsRequest($format = null, $before = null, $after = null, $limit = null, $search = null, $phone_number = null, $category = null, $status = null, $agent = null, $created_after = null, $start = null, $created_before = null, $end = null, $claimed_after = null, $claim_start = null, $claimed_before = null, $claim_end = null, $transferred_after = null, $transfer_start = null, $transferred_before = null, $transfer_end = null, $with_agent = null, $group = null, $additional_data = null)
    {
        if ($before !== null && !preg_match("/^[a-z0-9]{24}$/", $before)) {
            throw new \InvalidArgumentException("invalid value for \"before\" when calling ProspectsApi.getProspects, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        if ($after !== null && !preg_match("/^[a-z0-9]{24}$/", $after)) {
            throw new \InvalidArgumentException("invalid value for \"after\" when calling ProspectsApi.getProspects, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        if ($agent !== null && !preg_match("/^[a-z0-9]{24}$/", $agent)) {
            throw new \InvalidArgumentException("invalid value for \"agent\" when calling ProspectsApi.getProspects, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        if ($group !== null && !preg_match("/^[a-z0-9]{24}$/", $group)) {
            throw new \InvalidArgumentException("invalid value for \"group\" when calling ProspectsApi.getProspects, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phoneNumber'] = ObjectSerializer::toQueryValue($phone_number);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = ObjectSerializer::toQueryValue($category);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($agent !== null) {
            $queryParams['agent'] = ObjectSerializer::toQueryValue($agent);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end);
        }
        // query params
        if ($claimed_after !== null) {
            $queryParams['claimedAfter'] = ObjectSerializer::toQueryValue($claimed_after);
        }
        // query params
        if ($claim_start !== null) {
            $queryParams['claimStart'] = ObjectSerializer::toQueryValue($claim_start);
        }
        // query params
        if ($claimed_before !== null) {
            $queryParams['claimedBefore'] = ObjectSerializer::toQueryValue($claimed_before);
        }
        // query params
        if ($claim_end !== null) {
            $queryParams['claimEnd'] = ObjectSerializer::toQueryValue($claim_end);
        }
        // query params
        if ($transferred_after !== null) {
            $queryParams['transferredAfter'] = ObjectSerializer::toQueryValue($transferred_after);
        }
        // query params
        if ($transfer_start !== null) {
            $queryParams['transferStart'] = ObjectSerializer::toQueryValue($transfer_start);
        }
        // query params
        if ($transferred_before !== null) {
            $queryParams['transferredBefore'] = ObjectSerializer::toQueryValue($transferred_before);
        }
        // query params
        if ($transfer_end !== null) {
            $queryParams['transferEnd'] = ObjectSerializer::toQueryValue($transfer_end);
        }
        // query params
        if ($with_agent !== null) {
            $queryParams['withAgent'] = ObjectSerializer::toQueryValue($with_agent);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }
        // query params
        if (is_array($additional_data)) {
            $queryParams['additionalData'] = $additional_data;
        } else
        if ($additional_data !== null) {
            $queryParams['additionalData'] = ObjectSerializer::toQueryValue($additional_data);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuoteById
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Quote
     */
    public function getQuoteById($prospect_id, $quote_id, $format = null)
    {
        list($response) = $this->getQuoteByIdWithHttpInfo($prospect_id, $quote_id, $format);
        return $response;
    }

    /**
     * Operation getQuoteByIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuoteByIdWithHttpInfo($prospect_id, $quote_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Quote';
        $request = $this->getQuoteByIdRequest($prospect_id, $quote_id, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Quote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuoteByIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteByIdAsync($prospect_id, $quote_id, $format = null)
    {
        return $this->getQuoteByIdAsyncWithHttpInfo($prospect_id, $quote_id, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuoteByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuoteByIdAsyncWithHttpInfo($prospect_id, $quote_id, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Quote';
        $request = $this->getQuoteByIdRequest($prospect_id, $quote_id, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuoteById'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuoteByIdRequest($prospect_id, $quote_id, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling getQuoteById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.getQuoteById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling getQuoteById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $quote_id)) {
            throw new \InvalidArgumentException("invalid value for \"quote_id\" when calling ProspectsApi.getQuoteById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospect/{prospectId}/quote/{quoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQuotes
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Quotes
     */
    public function getQuotes($format = null, $before = null, $after = null, $limit = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        list($response) = $this->getQuotesWithHttpInfo($format, $before, $after, $limit, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);
        return $response;
    }

    /**
     * Operation getQuotesWithHttpInfo
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Quotes, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQuotesWithHttpInfo($format = null, $before = null, $after = null, $limit = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        $returnType = '\Swagger\Client\Model\Quotes';
        $request = $this->getQuotesRequest($format, $before, $after, $limit, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Quotes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQuotesAsync
     *
     * 
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuotesAsync($format = null, $before = null, $after = null, $limit = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        return $this->getQuotesAsyncWithHttpInfo($format, $before, $after, $limit, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQuotesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQuotesAsyncWithHttpInfo($format = null, $before = null, $after = null, $limit = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        $returnType = '\Swagger\Client\Model\Quotes';
        $request = $this->getQuotesRequest($format, $before, $after, $limit, $status, $created_before, $created_after, $accepted_before, $accepted_after, $rejected_before, $rejected_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQuotes'
     *
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     * @param  string $before Limits the results only to the prospects created before the one provided in this parameter (not included) (optional)
     * @param  string $after Limits the results only to the prospects created after the one provided in this parameter (not included) (optional)
     * @param  float $limit The maximum number of items that must be returned (A multiple number of 100 and no more than 1000 is recommended) (optional)
     * @param  string $status The status to filter. (optional)
     * @param  \DateTime $created_before The start date to filter quotes by their creation date. (optional)
     * @param  \DateTime $created_after The end date to filter quotes by their creation date. (optional)
     * @param  \DateTime $accepted_before The start date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $accepted_after The end date to filter quotes by their accepted date. (optional)
     * @param  \DateTime $rejected_before The start date to filter quotes by their rejected date. (optional)
     * @param  \DateTime $rejected_after The end date to filter quotes by their rejected date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQuotesRequest($format = null, $before = null, $after = null, $limit = null, $status = null, $created_before = null, $created_after = null, $accepted_before = null, $accepted_after = null, $rejected_before = null, $rejected_after = null)
    {
        if ($before !== null && !preg_match("/^[a-z0-9]{24}$/", $before)) {
            throw new \InvalidArgumentException("invalid value for \"before\" when calling ProspectsApi.getQuotes, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        if ($after !== null && !preg_match("/^[a-z0-9]{24}$/", $after)) {
            throw new \InvalidArgumentException("invalid value for \"after\" when calling ProspectsApi.getQuotes, must conform to the pattern /^[a-z0-9]{24}$/.");
        }


        $resourcePath = '/prospects/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($before !== null) {
            $queryParams['before'] = ObjectSerializer::toQueryValue($before);
        }
        // query params
        if ($after !== null) {
            $queryParams['after'] = ObjectSerializer::toQueryValue($after);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after);
        }
        // query params
        if ($accepted_before !== null) {
            $queryParams['acceptedBefore'] = ObjectSerializer::toQueryValue($accepted_before);
        }
        // query params
        if ($accepted_after !== null) {
            $queryParams['acceptedAfter'] = ObjectSerializer::toQueryValue($accepted_after);
        }
        // query params
        if ($rejected_before !== null) {
            $queryParams['rejectedBefore'] = ObjectSerializer::toQueryValue($rejected_before);
        }
        // query params
        if ($rejected_after !== null) {
            $queryParams['rejectedAfter'] = ObjectSerializer::toQueryValue($rejected_after);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newProspectQuote
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewQuote $quote quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Quote
     */
    public function newProspectQuote($prospect_id, $quote, $format = null)
    {
        list($response) = $this->newProspectQuoteWithHttpInfo($prospect_id, $quote, $format);
        return $response;
    }

    /**
     * Operation newProspectQuoteWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function newProspectQuoteWithHttpInfo($prospect_id, $quote, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Quote';
        $request = $this->newProspectQuoteRequest($prospect_id, $quote, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Quote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newProspectQuoteAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newProspectQuoteAsync($prospect_id, $quote, $format = null)
    {
        return $this->newProspectQuoteAsyncWithHttpInfo($prospect_id, $quote, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newProspectQuoteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newProspectQuoteAsyncWithHttpInfo($prospect_id, $quote, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Quote';
        $request = $this->newProspectQuoteRequest($prospect_id, $quote, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newProspectQuote'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\NewQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function newProspectQuoteRequest($prospect_id, $quote, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling newProspectQuote'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.newProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote' is set
        if ($quote === null || (is_array($quote) && count($quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote when calling newProspectQuote'
            );
        }

        $resourcePath = '/prospect/{prospectId}/quotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($quote)) {
            $_tempBody = $quote;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferProspect
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\Transfer $transfer Define the destination user or group. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function transferProspect($prospect_id, $transfer)
    {
        list($response) = $this->transferProspectWithHttpInfo($prospect_id, $transfer);
        return $response;
    }

    /**
     * Operation transferProspectWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\Transfer $transfer Define the destination user or group. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferProspectWithHttpInfo($prospect_id, $transfer)
    {
        $returnType = 'object';
        $request = $this->transferProspectRequest($prospect_id, $transfer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferProspectAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\Transfer $transfer Define the destination user or group. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferProspectAsync($prospect_id, $transfer)
    {
        return $this->transferProspectAsyncWithHttpInfo($prospect_id, $transfer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferProspectAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\Transfer $transfer Define the destination user or group. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transferProspectAsyncWithHttpInfo($prospect_id, $transfer)
    {
        $returnType = 'object';
        $request = $this->transferProspectRequest($prospect_id, $transfer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferProspect'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\Transfer $transfer Define the destination user or group. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function transferProspectRequest($prospect_id, $transfer)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling transferProspect'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.transferProspect, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'transfer' is set
        if ($transfer === null || (is_array($transfer) && count($transfer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer when calling transferProspect'
            );
        }

        $resourcePath = '/prospect/{prospectId}/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($transfer)) {
            $_tempBody = $transfer;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAdditionalData
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateAdditionalData $additional_data additional_data (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Prospect
     */
    public function updateAdditionalData($prospect_id, $additional_data, $format = null)
    {
        list($response) = $this->updateAdditionalDataWithHttpInfo($prospect_id, $additional_data, $format);
        return $response;
    }

    /**
     * Operation updateAdditionalDataWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateAdditionalData $additional_data (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Prospect, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdditionalDataWithHttpInfo($prospect_id, $additional_data, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->updateAdditionalDataRequest($prospect_id, $additional_data, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Prospect',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdditionalDataAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateAdditionalData $additional_data (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdditionalDataAsync($prospect_id, $additional_data, $format = null)
    {
        return $this->updateAdditionalDataAsyncWithHttpInfo($prospect_id, $additional_data, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdditionalDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateAdditionalData $additional_data (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdditionalDataAsyncWithHttpInfo($prospect_id, $additional_data, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->updateAdditionalDataRequest($prospect_id, $additional_data, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAdditionalData'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateAdditionalData $additional_data (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAdditionalDataRequest($prospect_id, $additional_data, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling updateAdditionalData'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.updateAdditionalData, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'additional_data' is set
        if ($additional_data === null || (is_array($additional_data) && count($additional_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $additional_data when calling updateAdditionalData'
            );
        }

        $resourcePath = '/prospect/{prospectId}/additionalData';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($additional_data)) {
            $_tempBody = $additional_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInteractionById
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  \Swagger\Client\Model\UpdateEvent $event event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Interaction
     */
    public function updateInteractionById($prospect_id, $interaction_id, $event, $format = null)
    {
        list($response) = $this->updateInteractionByIdWithHttpInfo($prospect_id, $interaction_id, $event, $format);
        return $response;
    }

    /**
     * Operation updateInteractionByIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  \Swagger\Client\Model\UpdateEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Interaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInteractionByIdWithHttpInfo($prospect_id, $interaction_id, $event, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Interaction';
        $request = $this->updateInteractionByIdRequest($prospect_id, $interaction_id, $event, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Interaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInteractionByIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  \Swagger\Client\Model\UpdateEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInteractionByIdAsync($prospect_id, $interaction_id, $event, $format = null)
    {
        return $this->updateInteractionByIdAsyncWithHttpInfo($prospect_id, $interaction_id, $event, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInteractionByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  \Swagger\Client\Model\UpdateEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInteractionByIdAsyncWithHttpInfo($prospect_id, $interaction_id, $event, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Interaction';
        $request = $this->updateInteractionByIdRequest($prospect_id, $interaction_id, $event, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInteractionById'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $interaction_id The id of the interaction. (required)
     * @param  \Swagger\Client\Model\UpdateEvent $event (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInteractionByIdRequest($prospect_id, $interaction_id, $event, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling updateInteractionById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.updateInteractionById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'interaction_id' is set
        if ($interaction_id === null || (is_array($interaction_id) && count($interaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $interaction_id when calling updateInteractionById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $interaction_id)) {
            throw new \InvalidArgumentException("invalid value for \"interaction_id\" when calling ProspectsApi.updateInteractionById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling updateInteractionById'
            );
        }

        $resourcePath = '/prospect/{prospectId}/interaction/{interactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($interaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'interactionId' . '}',
                ObjectSerializer::toPathValue($interaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($event)) {
            $_tempBody = $event;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProspectById
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateProspect $prospect prospect (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Prospect
     */
    public function updateProspectById($prospect_id, $prospect, $format = null)
    {
        list($response) = $this->updateProspectByIdWithHttpInfo($prospect_id, $prospect, $format);
        return $response;
    }

    /**
     * Operation updateProspectByIdWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateProspect $prospect (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Prospect, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProspectByIdWithHttpInfo($prospect_id, $prospect, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->updateProspectByIdRequest($prospect_id, $prospect, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Prospect',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProspectByIdAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateProspect $prospect (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProspectByIdAsync($prospect_id, $prospect, $format = null)
    {
        return $this->updateProspectByIdAsyncWithHttpInfo($prospect_id, $prospect, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProspectByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateProspect $prospect (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProspectByIdAsyncWithHttpInfo($prospect_id, $prospect, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Prospect';
        $request = $this->updateProspectByIdRequest($prospect_id, $prospect, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProspectById'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  \Swagger\Client\Model\UpdateProspect $prospect (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProspectByIdRequest($prospect_id, $prospect, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling updateProspectById'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.updateProspectById, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'prospect' is set
        if ($prospect === null || (is_array($prospect) && count($prospect) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect when calling updateProspectById'
            );
        }

        $resourcePath = '/prospect/{prospectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($prospect)) {
            $_tempBody = $prospect;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProspectQuote
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  \Swagger\Client\Model\UpdateQuote $quote quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Quote
     */
    public function updateProspectQuote($prospect_id, $quote_id, $quote, $format = null)
    {
        list($response) = $this->updateProspectQuoteWithHttpInfo($prospect_id, $quote_id, $quote, $format);
        return $response;
    }

    /**
     * Operation updateProspectQuoteWithHttpInfo
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  \Swagger\Client\Model\UpdateQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Quote, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProspectQuoteWithHttpInfo($prospect_id, $quote_id, $quote, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Quote';
        $request = $this->updateProspectQuoteRequest($prospect_id, $quote_id, $quote, $format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Quote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProspectQuoteAsync
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  \Swagger\Client\Model\UpdateQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProspectQuoteAsync($prospect_id, $quote_id, $quote, $format = null)
    {
        return $this->updateProspectQuoteAsyncWithHttpInfo($prospect_id, $quote_id, $quote, $format)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProspectQuoteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  \Swagger\Client\Model\UpdateQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProspectQuoteAsyncWithHttpInfo($prospect_id, $quote_id, $quote, $format = null)
    {
        $returnType = '\Swagger\Client\Model\Quote';
        $request = $this->updateProspectQuoteRequest($prospect_id, $quote_id, $quote, $format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProspectQuote'
     *
     * @param  string $prospect_id The id of the prospect. (required)
     * @param  string $quote_id The id of the quote. (required)
     * @param  \Swagger\Client\Model\UpdateQuote $quote (required)
     * @param  string $format An optional flag to force a response format. Note that the API also supports content negotiation and honors the Accept header. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateProspectQuoteRequest($prospect_id, $quote_id, $quote, $format = null)
    {
        // verify the required parameter 'prospect_id' is set
        if ($prospect_id === null || (is_array($prospect_id) && count($prospect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prospect_id when calling updateProspectQuote'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $prospect_id)) {
            throw new \InvalidArgumentException("invalid value for \"prospect_id\" when calling ProspectsApi.updateProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling updateProspectQuote'
            );
        }
        if (!preg_match("/^[a-z0-9]{24}$/", $quote_id)) {
            throw new \InvalidArgumentException("invalid value for \"quote_id\" when calling ProspectsApi.updateProspectQuote, must conform to the pattern /^[a-z0-9]{24}$/.");
        }

        // verify the required parameter 'quote' is set
        if ($quote === null || (is_array($quote) && count($quote) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote when calling updateProspectQuote'
            );
        }

        $resourcePath = '/prospect/{prospectId}/quote/{quoteId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }

        // path params
        if ($prospect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'prospectId' . '}',
                ObjectSerializer::toPathValue($prospect_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'quoteId' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($quote)) {
            $_tempBody = $quote;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/csv', 'text/plain']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/csv', 'text/plain'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
