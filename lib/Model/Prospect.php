<?php
/**
 * Prospect
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers, messaging and prospect data manipulation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: it@sirena.app
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Prospect Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Prospect implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Prospect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '\Swagger\Client\Model\ObjectId',
        'created' => '\DateTime',
        'account' => 'string',
        'account_id' => '\Swagger\Client\Model\ObjectId',
        'group' => 'string',
        'group_id' => '\Swagger\Client\Model\ObjectId',
        'initial_group' => 'string',
        'initial_group_id' => '\Swagger\Client\Model\ObjectId',
        'first_name' => 'string',
        'last_name' => 'string',
        'category' => 'string',
        'status' => '\Swagger\Client\Model\ProspectStatus',
        'nin' => '\Swagger\Client\Model\Nin[]',
        'user_made' => 'bool',
        'archiving_reason' => 'string',
        'phones' => 'string[]',
        'emails' => 'string[]',
        'additional_data' => 'object',
        'merged' => 'bool',
        'absence_message' => 'string',
        'leads' => '\Swagger\Client\Model\LeadData[]',
        'agent' => '\Swagger\Client\Model\Agent',
        'assigned' => '\DateTime',
        'next_reminder' => '\DateTime',
        'first_contacted_at' => '\DateTime',
        'sent_working_hour_message' => '\DateTime',
        'facebook_due_at' => '\DateTime',
        'instagram_due_at' => '\DateTime',
        'whats_app_due_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created' => 'date-time',
        'account' => null,
        'account_id' => null,
        'group' => null,
        'group_id' => null,
        'initial_group' => null,
        'initial_group_id' => null,
        'first_name' => null,
        'last_name' => null,
        'category' => null,
        'status' => null,
        'nin' => null,
        'user_made' => null,
        'archiving_reason' => null,
        'phones' => null,
        'emails' => null,
        'additional_data' => null,
        'merged' => null,
        'absence_message' => null,
        'leads' => null,
        'agent' => null,
        'assigned' => 'date-time',
        'next_reminder' => 'date-time',
        'first_contacted_at' => 'date-time',
        'sent_working_hour_message' => 'date-time',
        'facebook_due_at' => 'date-time',
        'instagram_due_at' => 'date-time',
        'whats_app_due_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created' => 'created',
        'account' => 'account',
        'account_id' => 'accountId',
        'group' => 'group',
        'group_id' => 'groupId',
        'initial_group' => 'initialGroup',
        'initial_group_id' => 'initialGroupId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'category' => 'category',
        'status' => 'status',
        'nin' => 'nin',
        'user_made' => 'userMade',
        'archiving_reason' => 'archivingReason',
        'phones' => 'phones',
        'emails' => 'emails',
        'additional_data' => 'additionalData',
        'merged' => 'merged',
        'absence_message' => 'absenceMessage',
        'leads' => 'leads',
        'agent' => 'agent',
        'assigned' => 'assigned',
        'next_reminder' => 'nextReminder',
        'first_contacted_at' => 'firstContactedAt',
        'sent_working_hour_message' => 'sentWorkingHourMessage',
        'facebook_due_at' => 'facebookDueAt',
        'instagram_due_at' => 'instagramDueAt',
        'whats_app_due_at' => 'whatsAppDueAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created' => 'setCreated',
        'account' => 'setAccount',
        'account_id' => 'setAccountId',
        'group' => 'setGroup',
        'group_id' => 'setGroupId',
        'initial_group' => 'setInitialGroup',
        'initial_group_id' => 'setInitialGroupId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'category' => 'setCategory',
        'status' => 'setStatus',
        'nin' => 'setNin',
        'user_made' => 'setUserMade',
        'archiving_reason' => 'setArchivingReason',
        'phones' => 'setPhones',
        'emails' => 'setEmails',
        'additional_data' => 'setAdditionalData',
        'merged' => 'setMerged',
        'absence_message' => 'setAbsenceMessage',
        'leads' => 'setLeads',
        'agent' => 'setAgent',
        'assigned' => 'setAssigned',
        'next_reminder' => 'setNextReminder',
        'first_contacted_at' => 'setFirstContactedAt',
        'sent_working_hour_message' => 'setSentWorkingHourMessage',
        'facebook_due_at' => 'setFacebookDueAt',
        'instagram_due_at' => 'setInstagramDueAt',
        'whats_app_due_at' => 'setWhatsAppDueAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created' => 'getCreated',
        'account' => 'getAccount',
        'account_id' => 'getAccountId',
        'group' => 'getGroup',
        'group_id' => 'getGroupId',
        'initial_group' => 'getInitialGroup',
        'initial_group_id' => 'getInitialGroupId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'category' => 'getCategory',
        'status' => 'getStatus',
        'nin' => 'getNin',
        'user_made' => 'getUserMade',
        'archiving_reason' => 'getArchivingReason',
        'phones' => 'getPhones',
        'emails' => 'getEmails',
        'additional_data' => 'getAdditionalData',
        'merged' => 'getMerged',
        'absence_message' => 'getAbsenceMessage',
        'leads' => 'getLeads',
        'agent' => 'getAgent',
        'assigned' => 'getAssigned',
        'next_reminder' => 'getNextReminder',
        'first_contacted_at' => 'getFirstContactedAt',
        'sent_working_hour_message' => 'getSentWorkingHourMessage',
        'facebook_due_at' => 'getFacebookDueAt',
        'instagram_due_at' => 'getInstagramDueAt',
        'whats_app_due_at' => 'getWhatsAppDueAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['initial_group'] = isset($data['initial_group']) ? $data['initial_group'] : null;
        $this->container['initial_group_id'] = isset($data['initial_group_id']) ? $data['initial_group_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['nin'] = isset($data['nin']) ? $data['nin'] : null;
        $this->container['user_made'] = isset($data['user_made']) ? $data['user_made'] : null;
        $this->container['archiving_reason'] = isset($data['archiving_reason']) ? $data['archiving_reason'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['additional_data'] = isset($data['additional_data']) ? $data['additional_data'] : null;
        $this->container['merged'] = isset($data['merged']) ? $data['merged'] : null;
        $this->container['absence_message'] = isset($data['absence_message']) ? $data['absence_message'] : null;
        $this->container['leads'] = isset($data['leads']) ? $data['leads'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['assigned'] = isset($data['assigned']) ? $data['assigned'] : null;
        $this->container['next_reminder'] = isset($data['next_reminder']) ? $data['next_reminder'] : null;
        $this->container['first_contacted_at'] = isset($data['first_contacted_at']) ? $data['first_contacted_at'] : null;
        $this->container['sent_working_hour_message'] = isset($data['sent_working_hour_message']) ? $data['sent_working_hour_message'] : null;
        $this->container['facebook_due_at'] = isset($data['facebook_due_at']) ? $data['facebook_due_at'] : null;
        $this->container['instagram_due_at'] = isset($data['instagram_due_at']) ? $data['instagram_due_at'] : null;
        $this->container['whats_app_due_at'] = isset($data['whats_app_due_at']) ? $data['whats_app_due_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        if ($this->container['group_id'] === null) {
            $invalidProperties[] = "'group_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['leads'] === null) {
            $invalidProperties[] = "'leads' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Swagger\Client\Model\ObjectId $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param \Swagger\Client\Model\ObjectId $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param \Swagger\Client\Model\ObjectId $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets initial_group
     *
     * @return string
     */
    public function getInitialGroup()
    {
        return $this->container['initial_group'];
    }

    /**
     * Sets initial_group
     *
     * @param string $initial_group initial_group
     *
     * @return $this
     */
    public function setInitialGroup($initial_group)
    {
        $this->container['initial_group'] = $initial_group;

        return $this;
    }

    /**
     * Gets initial_group_id
     *
     * @return \Swagger\Client\Model\ObjectId
     */
    public function getInitialGroupId()
    {
        return $this->container['initial_group_id'];
    }

    /**
     * Sets initial_group_id
     *
     * @param \Swagger\Client\Model\ObjectId $initial_group_id initial_group_id
     *
     * @return $this
     */
    public function setInitialGroupId($initial_group_id)
    {
        $this->container['initial_group_id'] = $initial_group_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category The unique name identifier of the prospect category.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\ProspectStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\ProspectStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets nin
     *
     * @return \Swagger\Client\Model\Nin[]
     */
    public function getNin()
    {
        return $this->container['nin'];
    }

    /**
     * Sets nin
     *
     * @param \Swagger\Client\Model\Nin[] $nin National Identification Number
     *
     * @return $this
     */
    public function setNin($nin)
    {
        $this->container['nin'] = $nin;

        return $this;
    }

    /**
     * Gets user_made
     *
     * @return bool
     */
    public function getUserMade()
    {
        return $this->container['user_made'];
    }

    /**
     * Sets user_made
     *
     * @param bool $user_made user_made
     *
     * @return $this
     */
    public function setUserMade($user_made)
    {
        $this->container['user_made'] = $user_made;

        return $this;
    }

    /**
     * Gets archiving_reason
     *
     * @return string
     */
    public function getArchivingReason()
    {
        return $this->container['archiving_reason'];
    }

    /**
     * Sets archiving_reason
     *
     * @param string $archiving_reason When the prospect is archived this property contains the code of the reason why it was filed.
     *
     * @return $this
     */
    public function setArchivingReason($archiving_reason)
    {
        $this->container['archiving_reason'] = $archiving_reason;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return string[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param string[] $phones phones
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return object
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param object $additional_data Additional and private data of the prospect. Only returned when the scope prospects:readAdditionalData is authorized.
     *
     * @return $this
     */
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets merged
     *
     * @return bool
     */
    public function getMerged()
    {
        return $this->container['merged'];
    }

    /**
     * Sets merged
     *
     * @param bool $merged If true, it means that the lead was merged with an existent prospect in Sirena
     *
     * @return $this
     */
    public function setMerged($merged)
    {
        $this->container['merged'] = $merged;

        return $this;
    }

    /**
     * Gets absence_message
     *
     * @return string
     */
    public function getAbsenceMessage()
    {
        return $this->container['absence_message'];
    }

    /**
     * Sets absence_message
     *
     * @param string $absence_message If message is present, it means that the target agent/s were not working and a absence message was configured for the group
     *
     * @return $this
     */
    public function setAbsenceMessage($absence_message)
    {
        $this->container['absence_message'] = $absence_message;

        return $this;
    }

    /**
     * Gets leads
     *
     * @return \Swagger\Client\Model\LeadData[]
     */
    public function getLeads()
    {
        return $this->container['leads'];
    }

    /**
     * Sets leads
     *
     * @param \Swagger\Client\Model\LeadData[] $leads leads
     *
     * @return $this
     */
    public function setLeads($leads)
    {
        $this->container['leads'] = $leads;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \Swagger\Client\Model\Agent
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \Swagger\Client\Model\Agent $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets assigned
     *
     * @return \DateTime
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param \DateTime $assigned assigned
     *
     * @return $this
     */
    public function setAssigned($assigned)
    {
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets next_reminder
     *
     * @return \DateTime
     */
    public function getNextReminder()
    {
        return $this->container['next_reminder'];
    }

    /**
     * Sets next_reminder
     *
     * @param \DateTime $next_reminder next_reminder
     *
     * @return $this
     */
    public function setNextReminder($next_reminder)
    {
        $this->container['next_reminder'] = $next_reminder;

        return $this;
    }

    /**
     * Gets first_contacted_at
     *
     * @return \DateTime
     */
    public function getFirstContactedAt()
    {
        return $this->container['first_contacted_at'];
    }

    /**
     * Sets first_contacted_at
     *
     * @param \DateTime $first_contacted_at first_contacted_at
     *
     * @return $this
     */
    public function setFirstContactedAt($first_contacted_at)
    {
        $this->container['first_contacted_at'] = $first_contacted_at;

        return $this;
    }

    /**
     * Gets sent_working_hour_message
     *
     * @return \DateTime
     */
    public function getSentWorkingHourMessage()
    {
        return $this->container['sent_working_hour_message'];
    }

    /**
     * Sets sent_working_hour_message
     *
     * @param \DateTime $sent_working_hour_message sent_working_hour_message
     *
     * @return $this
     */
    public function setSentWorkingHourMessage($sent_working_hour_message)
    {
        $this->container['sent_working_hour_message'] = $sent_working_hour_message;

        return $this;
    }

    /**
     * Gets facebook_due_at
     *
     * @return \DateTime
     */
    public function getFacebookDueAt()
    {
        return $this->container['facebook_due_at'];
    }

    /**
     * Sets facebook_due_at
     *
     * @param \DateTime $facebook_due_at facebook_due_at
     *
     * @return $this
     */
    public function setFacebookDueAt($facebook_due_at)
    {
        $this->container['facebook_due_at'] = $facebook_due_at;

        return $this;
    }

    /**
     * Gets instagram_due_at
     *
     * @return \DateTime
     */
    public function getInstagramDueAt()
    {
        return $this->container['instagram_due_at'];
    }

    /**
     * Sets instagram_due_at
     *
     * @param \DateTime $instagram_due_at instagram_due_at
     *
     * @return $this
     */
    public function setInstagramDueAt($instagram_due_at)
    {
        $this->container['instagram_due_at'] = $instagram_due_at;

        return $this;
    }

    /**
     * Gets whats_app_due_at
     *
     * @return \DateTime
     */
    public function getWhatsAppDueAt()
    {
        return $this->container['whats_app_due_at'];
    }

    /**
     * Sets whats_app_due_at
     *
     * @param \DateTime $whats_app_due_at whats_app_due_at
     *
     * @return $this
     */
    public function setWhatsAppDueAt($whats_app_due_at)
    {
        $this->container['whats_app_due_at'] = $whats_app_due_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


