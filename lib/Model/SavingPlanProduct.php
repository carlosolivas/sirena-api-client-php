<?php
/**
 * SavingPlanProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers, messaging and prospect data manipulation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: it@sirena.app
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SavingPlanProduct Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SavingPlanProduct extends Product 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SavingPlanProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'good_type' => 'string',
        'good_sub_type' => 'string',
        'brand' => 'string',
        'model' => 'string',
        'description' => 'string',
        'condition' => 'string',
        'plan_type' => 'string',
        'monthly_payments_estimate' => 'object',
        'credit_amount_estimate' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'good_type' => null,
        'good_sub_type' => null,
        'brand' => null,
        'model' => null,
        'description' => null,
        'condition' => null,
        'plan_type' => null,
        'monthly_payments_estimate' => null,
        'credit_amount_estimate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'good_type' => 'goodType',
        'good_sub_type' => 'goodSubType',
        'brand' => 'brand',
        'model' => 'model',
        'description' => 'description',
        'condition' => 'condition',
        'plan_type' => 'planType',
        'monthly_payments_estimate' => 'monthlyPaymentsEstimate',
        'credit_amount_estimate' => 'creditAmountEstimate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'good_type' => 'setGoodType',
        'good_sub_type' => 'setGoodSubType',
        'brand' => 'setBrand',
        'model' => 'setModel',
        'description' => 'setDescription',
        'condition' => 'setCondition',
        'plan_type' => 'setPlanType',
        'monthly_payments_estimate' => 'setMonthlyPaymentsEstimate',
        'credit_amount_estimate' => 'setCreditAmountEstimate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'good_type' => 'getGoodType',
        'good_sub_type' => 'getGoodSubType',
        'brand' => 'getBrand',
        'model' => 'getModel',
        'description' => 'getDescription',
        'condition' => 'getCondition',
        'plan_type' => 'getPlanType',
        'monthly_payments_estimate' => 'getMonthlyPaymentsEstimate',
        'credit_amount_estimate' => 'getCreditAmountEstimate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const GOOD_TYPE_VEHICLE = 'vehicle';
    const GOOD_TYPE_PROPERTY = 'property';
    const GOOD_TYPE_LOAN = 'loan';
    const GOOD_TYPE_OTHER = 'other';
    const CONDITION_USED = 'used';
    const CONDITION__NEW = 'new';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGoodTypeAllowableValues()
    {
        return [
            self::GOOD_TYPE_VEHICLE,
            self::GOOD_TYPE_PROPERTY,
            self::GOOD_TYPE_LOAN,
            self::GOOD_TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConditionAllowableValues()
    {
        return [
            self::CONDITION_USED,
            self::CONDITION__NEW,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['good_type'] = isset($data['good_type']) ? $data['good_type'] : null;
        $this->container['good_sub_type'] = isset($data['good_sub_type']) ? $data['good_sub_type'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['plan_type'] = isset($data['plan_type']) ? $data['plan_type'] : null;
        $this->container['monthly_payments_estimate'] = isset($data['monthly_payments_estimate']) ? $data['monthly_payments_estimate'] : null;
        $this->container['credit_amount_estimate'] = isset($data['credit_amount_estimate']) ? $data['credit_amount_estimate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getGoodTypeAllowableValues();
        if (!is_null($this->container['good_type']) && !in_array($this->container['good_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'good_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConditionAllowableValues();
        if (!is_null($this->container['condition']) && !in_array($this->container['condition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'condition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets good_type
     *
     * @return string
     */
    public function getGoodType()
    {
        return $this->container['good_type'];
    }

    /**
     * Sets good_type
     *
     * @param string $good_type The type of good the saving plan is for.
     *
     * @return $this
     */
    public function setGoodType($good_type)
    {
        $allowedValues = $this->getGoodTypeAllowableValues();
        if (!is_null($good_type) && !in_array($good_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'good_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['good_type'] = $good_type;

        return $this;
    }

    /**
     * Gets good_sub_type
     *
     * @return string
     */
    public function getGoodSubType()
    {
        return $this->container['good_sub_type'];
    }

    /**
     * Sets good_sub_type
     *
     * @param string $good_sub_type For example, in the case of a **vehicle**, a subtype may be `car`, `truck` or `motorcycle`. If the good type is **property**, the subtypes may be `house`, `apartment`, `land`, etc.
     *
     * @return $this
     */
    public function setGoodSubType($good_sub_type)
    {
        $this->container['good_sub_type'] = $good_sub_type;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand The brand of the good, if applicable.
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model The model of the good, if applicable.
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the good the saving plan is for.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition The vehicle condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $allowedValues = $this->getConditionAllowableValues();
        if (!is_null($condition) && !in_array($condition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'condition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets plan_type
     *
     * @return string
     */
    public function getPlanType()
    {
        return $this->container['plan_type'];
    }

    /**
     * Sets plan_type
     *
     * @param string $plan_type The type of saving plan.
     *
     * @return $this
     */
    public function setPlanType($plan_type)
    {
        $this->container['plan_type'] = $plan_type;

        return $this;
    }

    /**
     * Gets monthly_payments_estimate
     *
     * @return object
     */
    public function getMonthlyPaymentsEstimate()
    {
        return $this->container['monthly_payments_estimate'];
    }

    /**
     * Sets monthly_payments_estimate
     *
     * @param object $monthly_payments_estimate monthly_payments_estimate
     *
     * @return $this
     */
    public function setMonthlyPaymentsEstimate($monthly_payments_estimate)
    {
        $this->container['monthly_payments_estimate'] = $monthly_payments_estimate;

        return $this;
    }

    /**
     * Gets credit_amount_estimate
     *
     * @return object
     */
    public function getCreditAmountEstimate()
    {
        return $this->container['credit_amount_estimate'];
    }

    /**
     * Sets credit_amount_estimate
     *
     * @param object $credit_amount_estimate credit_amount_estimate
     *
     * @return $this
     */
    public function setCreditAmountEstimate($credit_amount_estimate)
    {
        $this->container['credit_amount_estimate'] = $credit_amount_estimate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


