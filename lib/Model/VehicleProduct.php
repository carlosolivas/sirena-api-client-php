<?php
/**
 * VehicleProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sirena API
 *
 * Sirena API for lead providers, messaging and prospect data manipulation.
 *
 * OpenAPI spec version: 1.10.0
 * Contact: it@sirena.app
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * VehicleProduct Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VehicleProduct extends Product 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VehicleProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'model_year' => 'string',
        'production_year' => 'string',
        'trim_level' => 'string',
        'style' => 'string',
        'condition' => 'string',
        'fuel_type' => 'string',
        'vin' => 'string',
        'registration_plate' => 'string',
        'reservation' => 'object',
        'odometer' => 'object',
        'trade_in_vehicle' => 'string',
        'finance' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'model_year' => null,
        'production_year' => null,
        'trim_level' => null,
        'style' => null,
        'condition' => null,
        'fuel_type' => null,
        'vin' => null,
        'registration_plate' => null,
        'reservation' => null,
        'odometer' => null,
        'trade_in_vehicle' => null,
        'finance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model_year' => 'modelYear',
        'production_year' => 'productionYear',
        'trim_level' => 'trimLevel',
        'style' => 'style',
        'condition' => 'condition',
        'fuel_type' => 'fuelType',
        'vin' => 'vin',
        'registration_plate' => 'registrationPlate',
        'reservation' => 'reservation',
        'odometer' => 'odometer',
        'trade_in_vehicle' => 'tradeInVehicle',
        'finance' => 'finance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model_year' => 'setModelYear',
        'production_year' => 'setProductionYear',
        'trim_level' => 'setTrimLevel',
        'style' => 'setStyle',
        'condition' => 'setCondition',
        'fuel_type' => 'setFuelType',
        'vin' => 'setVin',
        'registration_plate' => 'setRegistrationPlate',
        'reservation' => 'setReservation',
        'odometer' => 'setOdometer',
        'trade_in_vehicle' => 'setTradeInVehicle',
        'finance' => 'setFinance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model_year' => 'getModelYear',
        'production_year' => 'getProductionYear',
        'trim_level' => 'getTrimLevel',
        'style' => 'getStyle',
        'condition' => 'getCondition',
        'fuel_type' => 'getFuelType',
        'vin' => 'getVin',
        'registration_plate' => 'getRegistrationPlate',
        'reservation' => 'getReservation',
        'odometer' => 'getOdometer',
        'trade_in_vehicle' => 'getTradeInVehicle',
        'finance' => 'getFinance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONDITION_USED = 'used';
    const CONDITION__NEW = 'new';
    const FUEL_TYPE_GASOLINE = 'gasoline';
    const FUEL_TYPE_DIESEL = 'diesel';
    const FUEL_TYPE_FLEX = 'flex';
    const FUEL_TYPE_HYBRID = 'hybrid';
    const FUEL_TYPE_ELECTRIC = 'electric';
    const FUEL_TYPE_HYDROGEN = 'hydrogen';
    const FUEL_TYPE_NATURAL_GAS = 'naturalGas';
    const FUEL_TYPE_PROPANE = 'propane';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConditionAllowableValues()
    {
        return [
            self::CONDITION_USED,
            self::CONDITION__NEW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFuelTypeAllowableValues()
    {
        return [
            self::FUEL_TYPE_GASOLINE,
            self::FUEL_TYPE_DIESEL,
            self::FUEL_TYPE_FLEX,
            self::FUEL_TYPE_HYBRID,
            self::FUEL_TYPE_ELECTRIC,
            self::FUEL_TYPE_HYDROGEN,
            self::FUEL_TYPE_NATURAL_GAS,
            self::FUEL_TYPE_PROPANE,
        ];
    }
    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['model_year'] = isset($data['model_year']) ? $data['model_year'] : null;
        $this->container['production_year'] = isset($data['production_year']) ? $data['production_year'] : null;
        $this->container['trim_level'] = isset($data['trim_level']) ? $data['trim_level'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['fuel_type'] = isset($data['fuel_type']) ? $data['fuel_type'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['registration_plate'] = isset($data['registration_plate']) ? $data['registration_plate'] : null;
        $this->container['reservation'] = isset($data['reservation']) ? $data['reservation'] : null;
        $this->container['odometer'] = isset($data['odometer']) ? $data['odometer'] : null;
        $this->container['trade_in_vehicle'] = isset($data['trade_in_vehicle']) ? $data['trade_in_vehicle'] : null;
        $this->container['finance'] = isset($data['finance']) ? $data['finance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getConditionAllowableValues();
        if (!is_null($this->container['condition']) && !in_array($this->container['condition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'condition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFuelTypeAllowableValues();
        if (!is_null($this->container['fuel_type']) && !in_array($this->container['fuel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fuel_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model_year
     *
     * @return string
     */
    public function getModelYear()
    {
        return $this->container['model_year'];
    }

    /**
     * Sets model_year
     *
     * @param string $model_year The vehicle production year is the calendar year of production of that specific vehicle.
     *
     * @return $this
     */
    public function setModelYear($model_year)
    {
        $this->container['model_year'] = $model_year;

        return $this;
    }

    /**
     * Gets production_year
     *
     * @return string
     */
    public function getProductionYear()
    {
        return $this->container['production_year'];
    }

    /**
     * Sets production_year
     *
     * @param string $production_year A vehicle production year for a vehicle model is the calendar year designation assigned by the manufacturer to the annual version of that model.
     *
     * @return $this
     */
    public function setProductionYear($production_year)
    {
        $this->container['production_year'] = $production_year;

        return $this;
    }

    /**
     * Gets trim_level
     *
     * @return string
     */
    public function getTrimLevel()
    {
        return $this->container['trim_level'];
    }

    /**
     * Sets trim_level
     *
     * @param string $trim_level A vehicle trim level further identifies a vehicle by a particular set of special features. Higher trim levels either will add to the features of the \"base\" (entry-level model), or replace them with something else. Trim levels are designated by terms such as EX, LTZ, Touring and Grand Touring, among countless others.
     *
     * @return $this
     */
    public function setTrimLevel($trim_level)
    {
        $this->container['trim_level'] = $trim_level;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string $style A vehicle style includes additional vehicle data like the engine, transmission, colors, options.
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition The vehicle condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $allowedValues = $this->getConditionAllowableValues();
        if (!is_null($condition) && !in_array($condition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'condition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets fuel_type
     *
     * @return string
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     *
     * @param string $fuel_type The type of fuel the vehicle uses. - **Gasoline**, also known as **petrol**, is a petroleum-derived liquid fuel. - **Diesel** is a petroleum-derived liquid fuel with higher energy density than gasoline. Alternatively it can be blended with **biodiesel** manufactured from vegetable oils, animal fats, or recycled cooking grease. - **Flex** is gasoline blended with ethanol made from corn and other plant materials. - **Hybrid** vehicles use electricity in conjunction with other fuels to boost efficiency. - **Electric** plug-in vehicles use electricity without needing other fuels. - **Hydrogen** is a potentially emissions-free alternative fuel. - **Natural Gas** (CNG) is a gaseous fuel that consists mostly of methane. - **Propane**, also known as liquefied petroleum gas (LPG) or propane **autogas**, is a gaseous fuel produced as a by-product of natural gas processing and crude oil refining.
     *
     * @return $this
     */
    public function setFuelType($fuel_type)
    {
        $allowedValues = $this->getFuelTypeAllowableValues();
        if (!is_null($fuel_type) && !in_array($fuel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fuel_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin VIN number of the vehicle.
     *
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets registration_plate
     *
     * @return string
     */
    public function getRegistrationPlate()
    {
        return $this->container['registration_plate'];
    }

    /**
     * Sets registration_plate
     *
     * @param string $registration_plate The registration plate of the vehicle, also known as licence plate or number plate. For secondhand vehicles only.
     *
     * @return $this
     */
    public function setRegistrationPlate($registration_plate)
    {
        $this->container['registration_plate'] = $registration_plate;

        return $this;
    }

    /**
     * Gets reservation
     *
     * @return object
     */
    public function getReservation()
    {
        return $this->container['reservation'];
    }

    /**
     * Sets reservation
     *
     * @param object $reservation The reservation (orders) data from provider, used in marketplaces that support such feature (like MercadoLibre). Includes type, amount and currency.
     *
     * @return $this
     */
    public function setReservation($reservation)
    {
        $this->container['reservation'] = $reservation;

        return $this;
    }

    /**
     * Gets odometer
     *
     * @return object
     */
    public function getOdometer()
    {
        return $this->container['odometer'];
    }

    /**
     * Sets odometer
     *
     * @param object $odometer The total distance traveled by the vehicle as indicated by its odometer. For secondhand vehicles only.
     *
     * @return $this
     */
    public function setOdometer($odometer)
    {
        $this->container['odometer'] = $odometer;

        return $this;
    }

    /**
     * Gets trade_in_vehicle
     *
     * @return string
     */
    public function getTradeInVehicle()
    {
        return $this->container['trade_in_vehicle'];
    }

    /**
     * Sets trade_in_vehicle
     *
     * @param string $trade_in_vehicle A vehicle the buyer is trading in as part of the deal.
     *
     * @return $this
     */
    public function setTradeInVehicle($trade_in_vehicle)
    {
        $this->container['trade_in_vehicle'] = $trade_in_vehicle;

        return $this;
    }

    /**
     * Gets finance
     *
     * @return object
     */
    public function getFinance()
    {
        return $this->container['finance'];
    }

    /**
     * Sets finance
     *
     * @param object $finance finance
     *
     * @return $this
     */
    public function setFinance($finance)
    {
        $this->container['finance'] = $finance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


